-- GENERATED by C->Haskell Compiler, version 0.16.4 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "src/OSGeo/OGR/Internal.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE DeriveDataTypeable #-}

module OSGeo.OGR.Internal (
    Error (..)
  , OGRException (..)
  , isOGRException
  , throwIfError
) where

import Data.Typeable (Typeable)
import Data.Maybe (isJust)
import Control.Exception (Exception, SomeException, throw, fromException)
import Control.Monad (liftM)

import Foreign.C.String (withCString, CString, peekCString)
import Foreign.C.Types (CDouble(..), CInt(..), CChar(..))
import Foreign.Ptr (Ptr, FunPtr, castPtr, nullPtr, freeHaskellFunPtr)
import Foreign.Storable (Storable(..))
import Foreign.ForeignPtr (ForeignPtr, withForeignPtr, newForeignPtr
                          ,mallocForeignPtrArray)
import Foreign.Marshal.Alloc (alloca)
import Foreign.Marshal.Array (allocaArray)
import Foreign.Marshal.Utils (toBool, fromBool)

import System.IO.Unsafe (unsafePerformIO)

import OSGeo.Util


data OGRException = OGRException Error String
     deriving (Show, Typeable)

instance Exception OGRException

isOGRException :: SomeException -> Bool
isOGRException e = isJust (fromException e :: Maybe OGRException)

data Error = None
           | NotEnoughData
           | NotEnoughMemory
           | UnsupportedGeometryType
           | UnsupportedOperation
           | CorruptData
           | Failure
           | UnsupportedSRS
           | InvalidHandle
           deriving (Eq,Show)
instance Enum Error where
  fromEnum None = 0
  fromEnum NotEnoughData = 1
  fromEnum NotEnoughMemory = 2
  fromEnum UnsupportedGeometryType = 3
  fromEnum UnsupportedOperation = 4
  fromEnum CorruptData = 5
  fromEnum Failure = 6
  fromEnum UnsupportedSRS = 7
  fromEnum InvalidHandle = 8

  toEnum 0 = None
  toEnum 1 = NotEnoughData
  toEnum 2 = NotEnoughMemory
  toEnum 3 = UnsupportedGeometryType
  toEnum 4 = UnsupportedOperation
  toEnum 5 = CorruptData
  toEnum 6 = Failure
  toEnum 7 = UnsupportedSRS
  toEnum 8 = InvalidHandle
  toEnum unmatched = error ("Error.toEnum: Cannot match " ++ show unmatched)

{-# LINE 50 "src/OSGeo/OGR/Internal.chs" #-}

data GeometryType = Wkbunknown
                  | Wkbpoint
                  | Wkblinestring
                  | Wkbpolygon
                  | Wkbmultipoint
                  | Wkbmultilinestring
                  | Wkbmultipolygon
                  | Wkbgeometrycollection
                  | Wkbnone
                  | Wkblinearring
                  | Wkbpoint25d
                  | Wkblinestring25d
                  | Wkbpolygon25d
                  | Wkbmultipoint25d
                  | Wkbmultilinestring25d
                  | Wkbmultipolygon25d
                  | Wkbgeometrycollection25d
                  
instance Enum GeometryType where
  fromEnum Wkbunknown = 0
  fromEnum Wkbpoint = 1
  fromEnum Wkblinestring = 2
  fromEnum Wkbpolygon = 3
  fromEnum Wkbmultipoint = 4
  fromEnum Wkbmultilinestring = 5
  fromEnum Wkbmultipolygon = 6
  fromEnum Wkbgeometrycollection = 7
  fromEnum Wkbnone = 100
  fromEnum Wkblinearring = 101
  fromEnum Wkbpoint25d = 2147483649
  fromEnum Wkblinestring25d = 2147483650
  fromEnum Wkbpolygon25d = 2147483651
  fromEnum Wkbmultipoint25d = 2147483652
  fromEnum Wkbmultilinestring25d = 2147483653
  fromEnum Wkbmultipolygon25d = 2147483654
  fromEnum Wkbgeometrycollection25d = 2147483655

  toEnum 0 = Wkbunknown
  toEnum 1 = Wkbpoint
  toEnum 2 = Wkblinestring
  toEnum 3 = Wkbpolygon
  toEnum 4 = Wkbmultipoint
  toEnum 5 = Wkbmultilinestring
  toEnum 6 = Wkbmultipolygon
  toEnum 7 = Wkbgeometrycollection
  toEnum 100 = Wkbnone
  toEnum 101 = Wkblinearring
  toEnum 2147483649 = Wkbpoint25d
  toEnum 2147483650 = Wkblinestring25d
  toEnum 2147483651 = Wkbpolygon25d
  toEnum 2147483652 = Wkbmultipoint25d
  toEnum 2147483653 = Wkbmultilinestring25d
  toEnum 2147483654 = Wkbmultipolygon25d
  toEnum 2147483655 = Wkbgeometrycollection25d
  toEnum unmatched = error ("GeometryType.toEnum: Cannot match " ++ show unmatched)

{-# LINE 52 "src/OSGeo/OGR/Internal.chs" #-}

instance Show GeometryType where
    show s = let s' = fromEnumC s in unsafePerformIO $ 
        oGRGeometryTypeToName s' >>= peekCString
        
throwIfError :: String -> IO CInt -> IO ()
throwIfError msg act = do
    e <- liftM toEnumC act
    case e of
      None -> return ()
      e'   -> throw $ OGRException e' msg

foreign import ccall unsafe "src/OSGeo/OGR/Internal.chs.h OGRGeometryTypeToName"
  oGRGeometryTypeToName :: (CInt -> (IO (Ptr CChar)))
